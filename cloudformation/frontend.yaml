AWSTemplateFormatVersion: "2010-09-09"
Description: "Frontend infrastructure with S3, CloudFront, and Basic Authentication"

Parameters:
  ProjectName:
    Type: String
    Description: "Project name for resource naming"

  BasicAuthUsername:
    Type: String
    Default: "admin"
    Description: "Username for Basic Authentication"

  BasicAuthPassword:
    Type: String
    NoEcho: true
    Description: "Password for Basic Authentication"
    MinLength: 8

Resources:
  # S3 Bucket for static website hosting
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "${ProjectName}-frontend-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-frontend-s3"

  # CloudFront Function for Basic Authentication
  BasicAuthFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub "${ProjectName}-frontend-basic-auth"
      AutoPublish: true
      FunctionConfig:
        Comment: "Basic Authentication for Frontend"
        Runtime: cloudfront-js-1.0
      FunctionCode:
        Fn::Sub:
          - |
            function handler(event) {
              var request = event.request;
              var headers = request.headers;

              var expectedAuth = 'Basic ${EncodedCredentials}';

              if (!headers.authorization || headers.authorization.value !== expectedAuth) {
                return {
                  statusCode: 401,
                  statusDescription: 'Unauthorized',
                  headers: {
                    'www-authenticate': { value: 'Basic realm="Basic Authentication"' }
                  }
                };
              }

              return request;
            }
          - EncodedCredentials:
              Fn::Base64:
                Fn::Sub: "${BasicAuthUsername}:${BasicAuthPassword}"

  # Origin Access Control for CloudFront
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${ProjectName}-frontend-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-frontend-cf"
      DistributionConfig:
        Comment: !Sub "${ProjectName} Frontend Distribution"
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt BasicAuthFunction.FunctionMetadata.FunctionARN
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt S3Bucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !Ref OriginAccessControl
        PriceClass: PriceClass_100
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

  # S3 Bucket Policy to allow only CloudFront access
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: CloudFrontDistribution
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"


  # Parameter Store for outputs
  S3BucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${ProjectName}/frontend/s3-bucket-name"
      Type: String
      Value: !Ref S3Bucket
      Description: "S3 Bucket Name for frontend assets"
      Tags:
        Name: !Sub "${ProjectName}-frontend-s3-bucket-param"

  CloudFrontDistributionIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${ProjectName}/frontend/cloudfront-distribution-id"
      Type: String
      Value: !Ref CloudFrontDistribution
      Description: "CloudFront Distribution ID"
      Tags:
        Name: !Sub "${ProjectName}-frontend-cf-distribution-id-param"

  CloudFrontDomainNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${ProjectName}/frontend/cloudfront-domain-name"
      Type: String
      Value: !GetAtt CloudFrontDistribution.DomainName
      Description: "CloudFront Distribution Domain Name"
      Tags:
        Name: !Sub "${ProjectName}-frontend-cf-domain-name-param"

  WebsiteURLParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${ProjectName}/frontend/website-url"
      Type: String
      Value: !Sub "https://${CloudFrontDistribution.DomainName}"
      Description: "Website URL"
      Tags:
        Name: !Sub "${ProjectName}-frontend-website-url-param"

Outputs:
  S3BucketName:
    Description: "S3 Bucket Name for frontend assets"
    Value: !Ref S3Bucket
    Export:
      Name: !Sub "${ProjectName}-frontend-S3BucketName"

  CloudFrontDistributionId:
    Description: "CloudFront Distribution ID"
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub "${ProjectName}-frontend-CloudFrontDistributionId"

  CloudFrontDomainName:
    Description: "CloudFront Distribution Domain Name"
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub "${ProjectName}-frontend-CloudFrontDomainName"

  WebsiteURL:
    Description: "Website URL"
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Export:
      Name: !Sub "${ProjectName}-frontend-WebsiteURL"
