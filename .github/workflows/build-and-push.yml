name: Build, Push, and Deploy

# This workflow is triggered on a push to the main branch or can be triggered manually
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'terraform/**' # Trigger workflow on Terraform file changes as well
      - '.github/workflows/build-and-push.yml'

# Environment variables available to all jobs and steps in this workflow
env:
  ECR_REPOSITORY: try-aws-lambda-web-adapter
  AWS_REGION: ap-northeast-1
  TF_WORKING_DIR: ./terraform # Set Terraform working directory

jobs:
  build-push-deploy:
    name: Build, Push and Deploy
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # The ARN of the IAM role to assume
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }} # <-- IMPORTANT: You need to create this secret
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest,${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0 # You can specify your desired Terraform version

      - name: Terraform Init
        id: init
        timeout-minutes: 5 # Add a timeout to prevent indefinite hangs
        env:
          TF_LOG: DEBUG # Enable debug logging for Terraform
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false
        working-directory: ${{ env.TF_WORKING_DIR }}
